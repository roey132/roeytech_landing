---
// components/PainPoints.astro (TypeScript, no React)
type PainPoint = {
  title: string;
  description: string;
  hook?: string;
};

interface Props {
  title?: string;
  subtitle?: string;
  cta?: { text: string; href: string };
  items?: PainPoint[];
}

const defaultItems: PainPoint[] = [
  {
    title: "עושה שוב ושוב את אותן פעולות ידניות",
    description:
      "העברת לידים, שכפול נתונים, שליחת מיילים חוזרים—כל זה יכול לקרות אוטומטית.",
    hook: "כל יום אותו הסרט…",
  },
  {
    title: "אין תמונה ברורה מה עובד ומה לא",
    description:
      "נתונים מפוזרים בכלים שונים? חיבור חכם ו־Dashboards יכולים לעשות סדר.",
    hook: "מרגישים בחוש—לא יודעים במספרים",
  },
  {
    title: "לידים נעלמים בדרך",
    description:
      "אין מעקב? אין תזכורות? אוטומציה תוודא שאף ליד לא נופל בין הכיסאות.",
    hook: "הם שלחו הודעה… איפה זה עכשיו?",
  },
  {
    title: "עלויות כוח אדם גדלות על משימות קטנות",
    description:
      "תנו למערכות לעשות את העבודה השחורה—ושמרו את האנשים למשימות עם ערך.",
    hook: "עוד שעה פה, עוד שעה שם…",
  },
  {
    title: "יותר מדי מערכות שלא מדברות אחת עם השנייה",
    description: "אינטגרציות בין CRM, אתר, טפסים ומסרים חוסכות טעויות ובלגן.",
    hook: "Copy-Paste לכל כיוון…",
  },
  {
    title: "תקלות חוזרות שנפתרות ידנית כל פעם",
    description: "מנגנוני ניטור והתראות יטפלו בבעיה לפני שהיא פוגעת בלקוח.",
    hook: "למה זה שוב קרה?",
  },
];

const {
  title = "מכיר/ה את זה? 👇",
  subtitle = "אם לפחות אחת מהנקודות הבאות מרגישה לך מוכרת – יש סיכוי מעולה שאוטומציות יחסכו לך זמן, כסף וכאב ראש.",
  cta = { text: "בואו נסדר את זה", href: "#contact" },
  items = defaultItems,
} = Astro.props as Props;
---

<section id="pain-points" class="px-6 py-16">
  <div class="mx-auto max-w-6xl" dir="rtl">
    <!-- Headline -->
    <header class="mb-8 text-center">
      <h2
        class="text-3xl font-bold text-[rgb(var(--foreground))] underline decoration-violet-500 decoration-4 underline-offset-8 md:text-4xl"
      >
        {title}
      </h2>
      <p class="mt-3 text-lg text-[rgb(var(--muted))] md:text-xl">{subtitle}</p>
    </header>

    <!-- Self-check note + counter -->
    <div
      class="purple-hue mx-auto mb-8 max-w-3xl rounded-2xl border border-[rgb(var(--border))] bg-[rgb(var(--card))]/70 p-4 md:p-6"
    >
      <div class="flex items-center justify-between gap-3">
        <p
          class="text-right text-base text-[rgb(var(--foreground))] md:text-lg"
        >
          סמנו מה רלוונטי אליכם –<span class="mx-1 font-semibold"
            >אם סימנתם 2 או יותר</span
          > כנראה שהגיע הזמן לאוטומציות.
        </p>
        <span
          data-counter
          class="shrink-0 rounded-full border border-[rgb(var(--ring))]/60 px-3 py-1 text-sm text-[rgb(var(--muted-foreground))] md:text-base"
          >0 נבחרו</span
        >
      </div>
    </div>

    <!-- Cards: fixed-size cards, flexible placement -->
    <div class="flex flex-wrap justify-center gap-4 sm:gap-5">
      {
        items.map(({ title, description, hook }) => (
          <article
            data-card
            class="group relative flex max-w-full shrink-0 grow-0 basis-full cursor-pointer flex-col justify-between rounded-2xl border-2 border-[rgb(var(--border))] bg-[rgb(var(--card))]/70 p-5 transition focus-within:border-[rgb(var(--ring))] hover:border-[rgb(var(--ring))] hover:shadow-lg sm:max-w-[320px] sm:basis-[320px] lg:max-w-[340px] lg:basis-[340px]"
            tabindex="0"
            role="button"
            aria-pressed="false"
          >
            <div class="flex flex-col items-center text-center">
              <h3 class="text-xl font-semibold text-[rgb(var(--foreground))]">
                {title}
              </h3>
              <p class="mt-2 text-[rgb(var(--foreground))]">{description}</p>
            </div>

            {hook ? (
              <div
                data-hook
                class="absolute -top-3 -right-3 translate-y-1 rounded-full bg-[rgb(var(--primary))] px-3 py-1 text-sm font-medium text-[rgb(var(--primary-foreground))] opacity-0 transition duration-300 group-hover:translate-y-0 group-hover:opacity-100"
              >
                {hook}
              </div>
            ) : null}

            <div class="mt-4 flex justify-center">
              <input
                type="checkbox"
                class="h-5 w-5 cursor-pointer accent-green-500"
                aria-label="רלוונטי לי"
              />
            </div>
          </article>
        ))
      }
    </div>

    <!-- CTA -->
    <div
      class="mt-8 flex flex-col items-center justify-center gap-3 sm:flex-row"
    >
      <a
        onclick="window.gtag && gtag('event', 'contact_click_painpoints')"
        href={cta.href}
        class="inline-block rounded-lg bg-[rgb(var(--primary))] px-6 py-3 text-lg font-medium text-[rgb(var(--primary-foreground))] transition hover:opacity-90"
      >
        {cta.text}
      </a>
      <span class="text-sm text-[rgb(var(--muted))]"
        >נדבר 10 דק׳ – ממפים תהליך אחד וחוסכים שעות.</span
      >
    </div>
  </div>

  <!-- Behavior: checkbox counter + mobile highlight of the 2 nearest cards + card click toggles checkbox -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const root = document.getElementById("pain-points");
      if (!root) return;

      // ---- Checkbox counter (visual only) ----
      const boxes = root.querySelectorAll('input[type="checkbox"]');
      const counter = root.querySelector("[data-counter]");
      const cta = root.querySelector("a[href^='#contact']");
      const baseText = cta?.textContent || "";

      const updateCounter = () => {
        const n = Array.from(boxes).filter(
          (b) => (b as HTMLInputElement).checked,
        ).length;
        if (counter) counter.textContent = n + " נבחרו";
        if (cta) cta.textContent = n >= 2 ? "בואו נפסיק לבזבז זמן" : baseText;
      };
      boxes.forEach((b) => b.addEventListener("change", updateCounter));
      updateCounter(); // all unchecked by default

      // ---- Make whole card toggle its own checkbox ----
      const cards = Array.from(
        root.querySelectorAll("[data-card]"),
      ) as HTMLElement[];

      const toggleCardCheckbox = (card: HTMLElement) => {
        const selection =
          (window.getSelection && window.getSelection()?.toString()) || "";
        if (selection && selection.length > 0) return; // don't toggle if user is selecting text
        const box = card.querySelector(
          'input[type="checkbox"]',
        ) as HTMLInputElement | null;
        if (!box) return;
        box.checked = !box.checked;
        updateCounter();
      };

      cards.forEach((card) => {
        // Click anywhere on the card (except directly on the checkbox—handled natively)
        card.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          if (target.closest('input[type="checkbox"]')) return; // avoid double toggle
          toggleCardCheckbox(card);
        });
        // Keyboard accessibility
        card.addEventListener("keydown", (e: KeyboardEvent) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            toggleCardCheckbox(card);
          }
        });
      });

      // ---- Mobile: highlight the two cards closest to viewport center (independent of checkboxes) ----
      const mql = window.matchMedia("(max-width: 767px)");

      function setActiveClosestTwo() {
        cards.forEach((card) => {
          card.classList.remove("mobile-active");
          const h = card.querySelector("[data-hook]") as HTMLElement | null;
          if (h) h.classList.remove("visible-hook");
        });

        if (!mql.matches) return; // desktop — hover handles the emphasis

        const viewportCenter = window.innerHeight / 2;

        const ranked = cards
          .map((card) => {
            const rect = card.getBoundingClientRect();
            const visible = rect.bottom >= 0 && rect.top <= window.innerHeight;
            const cardCenter = rect.top + rect.height / 2;
            const dist = Math.abs(cardCenter - viewportCenter);
            return {
              card,
              visible,
              dist: visible ? dist : Number.POSITIVE_INFINITY,
            };
          })
          .sort((a, b) => a.dist - b.dist);

        const active = ranked.filter((r) => isFinite(r.dist)).slice(0, 2);
        active.forEach(({ card }) => {
          card.classList.add("mobile-active");
          const h = card.querySelector("[data-hook]") as HTMLElement | null;
          if (h) h.classList.add("visible-hook");
        });
      }

      // rAF throttling for scroll/resize
      let ticking = false;
      const onScrollOrResize = () => {
        if (ticking) return;
        ticking = true;
        requestAnimationFrame(() => {
          setActiveClosestTwo();
          ticking = false;
        });
      };

      const attachMobile = () => {
        setActiveClosestTwo();
        window.addEventListener("scroll", onScrollOrResize, { passive: true });
        window.addEventListener("resize", onScrollOrResize);
        window.addEventListener("orientationchange", onScrollOrResize);
      };
      const detachMobile = () => {
        window.removeEventListener("scroll", onScrollOrResize);
        window.removeEventListener("resize", onScrollOrResize);
        window.removeEventListener("orientationchange", onScrollOrResize);
        cards.forEach((card) => {
          card.classList.remove("mobile-active");
          const h = card.querySelector("[data-hook]") as HTMLElement | null;
          if (h) h.classList.remove("visible-hook");
        });
      };

      if (mql.addEventListener) {
        mql.addEventListener("change", (e) =>
          e.matches ? attachMobile() : detachMobile(),
        );
      } else {
        // Safari fallback
        mql.addListener((e) => (e.matches ? attachMobile() : detachMobile()));
      }

      // boot
      if (mql.matches) attachMobile();
      else setActiveClosestTwo();
    });
  </script>

  <!-- Styles for mobile-active + hook visibility on mobile -->
  <style>
    @media (max-width: 767px) {
      [data-card].mobile-active {
        border-color: rgb(var(--ring)) !important;
        box-shadow:
          0 10px 15px -3px rgb(0 0 0 / 0.1),
          0 4px 6px -4px rgb(0 0 0 / 0.1);
      }
      /* Keep hook visible on active cards in mobile */
      [data-hook] {
        transition: none !important;
      }
      [data-hook].visible-hook {
        opacity: 1 !important;
        transform: none !important;
      }
    }
  </style>
</section>
